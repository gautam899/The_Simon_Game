//Step 1-> The step one creating this game simon is to create this file named game.js nad link it to our html file.


//Step->2.3 The below function will generate random number from 0->3
var buttonColors = ["red","blue","green","yellow"];

//Step->2.5 An empty array created to store the system generated pattern of the simon game.
var gamePattern = [];

//Step->4.3 Create an empty array to store the user clicked pattern.
var userClickedPattern = [];


//Step 7

//Step 7.2->We need a variable to keep track of whether a game has started or not
var started  = false;

//Step 7.2->Variable to keep track of  the levels and we initialize it with 0
var level = 0;

//Step 7.1->Now we need to detect if a key has been pressed on the keyboard. If that happens we turn started to true and level 0 and call the function nextSequence() for the first time. We also have to make sure that when the game has started no key press should call the function next sequence.
$(document).keypress(function(){
    if(!started)
    {        
        $("#level-title").text("Level " + level);
        nextSequence();
        started=true;
    }
});


//Step->4.1 Now we need to check which button is pressed.
$(".btn").click(function() {

    //Step->4.2 Create a variable to store the ID of the button pressed by the user.
    var userChosenColor = $(this).attr("id"); // get the color name of the clicked button

    //Step->4.4 Push the user clicked color to the edn of the array userClickedPattern.
    userClickedPattern.push(userChosenColor); // add the color to the user's sequence

    //Step->5 To play sound corresponding to clicked color 
    playSound(userChosenColor);

    //Step->6 To animate the flash on the button choosen by the user.
    animatePress(userChosenColor);

    //Pass the index of the last press by the user to checkAnswer function
    checkAnswer(userClickedPattern.length - 1);
});

//Step 8.1-> our most important step is to check the user answer against the game sequence.
function checkAnswer(currentLevel)
{
    //We need to write a if statement to check if the most recent user answer is same as the game pattern.
    if(gamePattern[currentLevel]===userClickedPattern[currentLevel]){
        console.log("Success");

        
        //Step 8.2->Now we need to check if the user have completed the sequence. If yes then we call the function nextSequence() after 1000ms
        if(gamePattern.length === userClickedPattern.length)
        {
            // console.log("Success");
            setTimeout(function(){
                nextSequence();
            },1000);
        }
    }
    else {
        // console.log("Wrong");

        //Step->9 If the user gets the answer wrong we need to play a sound of wrong.mp3
        playSound("wrong");
        $("body").addClass("game-over");
        

        //Set timeout to remove the class
        setTimeout(function(){
            $("body").removeClass("game-over");
        },200);
        $("#level-title").text("Game Over, Press Any Key to Restart");
        //Step 10.If the user get wrong we start over again
        startover();
    }
}

//Step->2 The stpe 2 of our progress is to create a function names nextSequence().
function nextSequence()
{
    //Step 8.3-> One next sequence is triggered we reset the userPattern to an empty array getting it ready for the next level
    userClickedPattern = [];

    //Step 7.3->We need to increment the level by one every time next sequence is called
    level++;
    //Step 7.3->Also we need to update the level of the game every time the function is called 
    $("#level-title").text("Level " + level);

    //Step 2.1-> Then we have have to generate a random number between 0 to 3 using java script.
    var randomNumber = Math.floor(Math.random() * 4);

    //Step->2.4 Choose random color from the color array using the random number generated in the above step.
    var randomChosenColor = buttonColors[randomNumber];

    //Step->2.6 Push the random color choosen in the array game pattern. This is because we need to store the pattern generated by the sytem in the array.
    gamePattern.push(randomChosenColor);

    //Step->3.1 Now we need to animate flash on the button the user presses. In order to do this we will select the id of the randomChosenColor and use the fadeIn and fadeOut property of the js.
    $("#" + randomChosenColor).fadeIn(100).fadeOut(100).fadeIn(100);

    //Step 3.2 now we will paly the sound corresponding the button randomly selected by the system using the randmoly generated variable above. In order to do that we create a function named playSound which take random choosen color as the input.
    playSound(randomChosenColor);
}


function playSound(name)
{
    var audio = new Audio("sounds/"+name+".mp3");
    audio.play();
}


//Step->6 Now we need to animate the press on the button
function animatePress(currentColor)
{
    //Add the class pressed from the css file to the current color.
    $("#"+currentColor).addClass("pressed");

    //Now we need to add a time out to the animation. Let's say a 100 ms.
    setTimeout(function()
    {
        //When the animation is over remove the pressed class so it can be pressed again. The animation will fade away after 100 milli seconds
        $("#" + currentColor).removeClass("pressed");
    },  100);    
}

//Step->10 If the user gets the wrong sequence we restart the game. To do that we call a function startOver
function startover()
{
    level = 0;
    gamePattern = [];
    started = false;
}










